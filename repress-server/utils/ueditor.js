var Busboy = require('busboy');var fs = require('fs');var fse = require('fs-extra');var os = require('os');var path = require('path');var snowflake = require('node-snowflake').Snowflake;var qn = require('qn');//阿里云上传,var OSS = require('ali-oss');var co = require('co');var isEmpty = function(obj) {    return Object.keys(obj).length === 0 && obj.constructor === Object;};var ueditor = function (static_url, config = {}, handel) {    console.log('from local util/ueditor');    return function (req, res, next) {        var _respond = respond(static_url, config, handel);        _respond(req, res, next);    };};var respond = function (static_url, config = {}, callback) {    if (typeof config === 'function') {        callback = config;        config = {}    }    return function (req, res, next) {        if (req.query.action === 'config') {            callback(req, res, next);            return;        }        else if (req.query.action === 'listimage') {            res.ue_list = function (list_dir) {                var str = '';                var i = 0;                var list = [];                fs.readdir(static_url + list_dir, function (err, files) {                    if (err) throw err;                    var total = files.length;                    files.forEach(function (file) {                        var filetype = 'jpg,png,gif,ico,bmp';                        var tmplist = file.split('.');                        var _filetype = tmplist[tmplist.length - 1];                        if (filetype.indexOf(_filetype.toLowerCase()) >= 0) {                            var temp = {};                            if (list_dir === '/') {                                temp.url = list_dir + file;                            } else {                                temp.url = list_dir + "/" + file;                            }                            list[i] = (temp);                        } else { }                        i++;                        // send file name string when all files was processed                        if (i === total) {                            res.json({                                "state": "SUCCESS",                                "list": list,                                "start": 1,                                "total": total                            });                        }                    });                });            };            callback(req, res, next);        }        else if (req.query.action === 'uploadimage'||req.query.action === 'uploadfile'||req.query.action === 'uploadvideo') {            var busboy = new Busboy({                headers: req.headers            });            busboy.on('file', function (fieldname, file, filename, encoding, mimetype) {                req.ueditor = {};                req.ueditor.fieldname = fieldname;                req.ueditor.file = file;                req.ueditor.filename = filename;                req.ueditor.encoding = encoding;                req.ueditor.mimetype = mimetype;                res.ue_up = function (img_url) {                    console.log('imgUrl',img_url);                    var tmpdir = path.join(os.tmpdir(), path.basename(filename));                    var name = snowflake.nextId() + path.extname(tmpdir);                    var dest = path.join(static_url, img_url, name);                    var client = {};                    if (config.qn) {                        client = qn.create(config.qn);                        client.upload(file, {                            key: 'ueditor/images/' + name                        }, function (err, results) {                            if (err) throw err;                            res.json({                                'url': results.url,                                'title': req.body.pictitle,                                'original': filename,                                'state': 'SUCCESS'                            });                        });                        return false                    }                    if(config.oss){                        console.log('tmpdir',tmpdir);                        // 写文件到本地，才能读                        let writeStream = fs.createWriteStream(tmpdir);                        file.pipe(writeStream);                        writeStream.on("close", () => {                            client = new OSS(config.oss);                            co(function* () {                                var result = yield client.put('ueditor/images/' + name,tmpdir);                                console.log('result',result);                                res.json({                                    'url': result.url,                                    "title":'',                                    'original': filename,                                    'state': 'SUCCESS'                                })                            }).catch((err) => {                                console.log(err);                                return false;                            })                        })                    }                };                callback(req,res,next);            });            req.pipe(busboy);        } else {            callback(req, res, next);        }        return;    };};module.exports = ueditor;